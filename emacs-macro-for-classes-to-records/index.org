#+title: An emacs macro to transform DTOs
#+subtitle: TBH I just feel cool whenever I make a macro that works ðŸ˜Ž
#+date: 16 February 2025
#+options: toc:nil num:nil html-style:nil html5-fancy:'t title:nil exports:both
#+html_content_class: container
#+html_head: <link rel="stylesheet" href="../style.css">
#+html_head: <meta charset="utf-8">
#+html_head:<meta http-equiv="X-UA-Compatible" content="IE=edge">
#+html_head:<meta name="viewport" content="width=device-width, initial-scale=1">
#+html_head:<link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
#+html_head:<link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
#+html_head:<link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
#+html_head:<meta property="og:url" content="https://chamook.lol/emacs-macro-for-classes-to-records/" />
#+html_head:<meta property="og:image" content="https://chamook.lol/emacs-macro-for-classes-to-records/card.png" />
#+html_head:<meta property="og:type" content="article" />
#+html_head:<meta property="article:published_time" content="2025-02-16T15:30:00+02:00" />
#+html_head:<meta name="twitter:card" content="summary_large_image" />
#+html_head:<meta property="twitter:image" content="https://chamook.lol/emacs-macro-for-classes-to-records/card.png" />
#+html_head:<meta property="twitter:title" content="An emacs macro to transform DTO" />
#+html_head:<meta property="twitter:description" content="TBH I just feel cool whenever I make a macro that works ðŸ˜Ž" />

I really like how emacs macros let me capture and replay my own stupid approaches to problems.

I had a bunch of DTO classes that looked like this:

#+begin_src csharp
public class ThingContainer
{
    [JsonPropertyName("thing_one")]
    public string ThingOne { get; set; }

    [JsonPropertyName("thing_two")]
    public string ThingTwo { get; set; }
}
#+end_src

and I wanted to convert them into records like this:

#+begin_src csharp
public sealed record ThingContainer(
    [property: JsonPropertyName("thing_one")] string ThingOne,
    [property: JsonPropertyName("thing_two")] string ThingTwo);
#+end_src

I'm sure Visual Studio or Rider has a feature for doing that, but I am just a simple country emacs user so
I used some find and replace commands, and made a macro so it was easy to repeat. This is all using evil mode
and some very vim commands.

First off, change =class= to =sealed record=:
#+begin_src
:%s/class/sealed record
#+end_src

This is a change that was easy enough to apply to all the classes at once, so it doesn't need to be part of a macro.

Now to the fiddly bit, position the cursor on the opening curly boi and start a macro (=C-x (= in my config)
then do the following:

Select the whole body of the class
#+begin_src
  V %
#+end_src
Add the =property= prefix to the attributes:
#+begin_src
  :'<,'>s/JsonProperty/property: JsonProperty/
#+end_src

After each find/replace command the text is unselected so it needs to be selected again before running the next one.
In this case, the cursor ends up on the last attribute, so moving down twice gets to the closing curly boi (=j j=)
then selecting everything is the same as before:
#+begin_src
  V %
#+end_src

Remove =public= from all the properties:
#+begin_src
  :'<,'>s/public //
#+end_src

Select the whole class again by moving one line down =j= and then pressing =V %=

Remove the get and set, and the blank line as well:
#+begin_src
  :'<,'>s/ { get.*\n/,/
#+end_src

Select the whole class again by pressing =V %=

Remove the newline between the attributes and the properties:
#+begin_src
  :'<,'>s/]\n */] /
#+end_src

Move to the beginning of the class =A= to get to the end of the line =%= to jump to the opening curly boi

=A= to edit at the end of the line, then backspace twice to delete the curly boi and newline, replace it with =(=,
=esc= to go back to normal mode after typing.

This change breaks the scope declaration so =%= won't work for getting to the end of the block anymore,
instead use =}= to get to the next blank line, and =b= jumps backwards to the trailing comma. Select that and the
closing curly boi with =v e= then =c= to replace it, type =);= as the last part of our record, then =esc= for
back to normal mode.

Finally =C-x )= to finish recording the macro.

Now it can be used on all the other classes by moving the cursor to the right position and hitting =C-x e=

Doing it this way let me work through the changes I wanted to make one at a time, and then have a simple command for all the
other classes where I wanted to make the change ðŸ˜ƒ
